import numpy as np

def sor(A, b, omega, tol=1e-9, max_iter=1000):
    """
    Successive Over-Relaxation (SOR) method.

    Parameters:
    A (numpy array): coefficient matrix
    b (numpy array): right-hand side vector
    omega (float): relaxation parameter
    tol (float, optional): tolerance for convergence
    max_iter (int, optional): maximum number of iterations

    Returns:
    x (numpy array): solution vector
    """
    n = len(b)
    x = np.zeros(n)

    for _ in range(max_iter):
        x_prev = x.copy()
        for i in range(n):
            sigma = sum(A[i, j] * x[j] for j in range(n) if j != i)
            x[i] = (1 - omega) * x[i] + (omega / A[i, i]) * (b[i] - sigma)

        if np.linalg.norm(x - x_prev) < tol:
            break

    return x

# Example usage:
A = np.array([[4, -1, 2], [-1, 5, 0], [2, 0, 6]])
b = np.array([8, 9, 15])
omega = 1.25  # relaxation parameter

x = sor(A, b, omega)
print("Solution:", x)


